#!/bin/bash
normal=$(tput sgr0)
bold=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
underline=$(tput smul)
script_path=$0
script_dir=$(dirname $0)
aws_sso_configpath=/usr/local/etc/awsso.env
aws_sso_configformatter=/usr/local/etc/awsso_formatter.py
aws_sso_prompt() {
  printf "%b" "[${yellow} ? ${normal}] $1 "
}

verify_awsso_deps() {
  mkdir -p ~/.aws
  touch ~/.aws/config
  touch ~/.aws/credentials

  # Make Sure DEPs are installed
  if ! type "aws-sso-util" >/dev/null; then
    printf "\n• Please Install ${bold}${green}aws-sso-util${normal}: https://github.com/benkehoe/aws-sso-util \n\n"
    return 1
  fi

  if ! type "aws-export-credentials" >/dev/null; then
    printf "\n• Please Install ${bold}${green}aws-export-credentials${normal}: https://github.com/benkehoe/aws-export-credentials \n\n"
    return 1
  fi
}

verify_awsso_setup()
{
  if [ ! -f $aws_sso_configpath ]; then
    awsso_setup
  fi
}

awsso_login() {
  verify_awsso_deps
  verify_awsso_setup

  # Use last used profile if no argument was supplied
  if [ ! "$1" ]; then
    if [ -f ~/.aws/last_used_profile ]; then
      profile="$(command cat ~/.aws/last_used_profile)"
      printf "\nUsing last used porfile \033[0;33m \033[4;33m"$profile"\033[0m profile...\n\n"
    else
      echo "Please login with a profile first."
      return 1
    fi
  else
    profile=$1
  fi

  # Check if Profile Exits
  (cat "$HOME"/.aws/config | grep \\\[profile\ "$profile"\\\] >/dev/null) || {
    printf "\n ${red}✘${normal} Profile${red}  ${underline}$profile${normal} Doesn't Exist in ~/.aws/config\n\n"
    return 1
  }

  # Login usin SSO Util
  (aws-sso-util login | tail -1) || {
    printf "\n ${red}✘${normal} Failed to Login \n"
    return 1
  }

  # Export to ENV
  export AWS_PROFILE=$profile

  # Save Last Used Profile
  printf $AWS_PROFILE >~/.aws/last_used_profile

  # Put credentials  in ~/.aws/credentials asynchronously
  (aws-export-credentials --profile $AWS_PROFILE -c $AWS_PROFILE &>/dev/null &)

  printf "\n ${green}✔${normal} Switched to ${yellow} ${underline}$AWS_PROFILE${normal} profile ✨ \n\n"
}
awsso_list() {
  aws-sso-util roles
}
awsso_logout() {
  aws sso logout
  rm -rf ~/.aws/sso
}

awsso_setup() {

  verify_awsso_deps

  # AWS SSO
  aws_sso_prompt "Default SSO Name: \n"
  read DEFAULT_SSO_NAME
  aws_sso_prompt "Default SSO Region: \n"
  read DEFAULT_SSO_REGION
  aws_sso_prompt "Default AWS Region: \n"
  read DEFAULT_AWS_REGION

  # Write DEFAULTS
  touch $aws_sso_configpath
  cat >$aws_sso_configpath <<HELP
#!/bin/bash
export AWS_CONFIGURE_SSO_DEFAULT_SSO_START_URL=https://${DEFAULT_SSO_NAME}.awsapps.com/start
export AWS_CONFIGURE_SSO_DEFAULT_SSO_REGION=${DEFAULT_SSO_REGION}
export DEFAULT_AWS_REGION=${DEFAULT_AWS_REGION}
HELP

}

awsso_populate() {
  verify_awsso_setup
  source $aws_sso_configpath
  if [ -f $aws_sso_configformatter ]; then
    aws-sso-util configure populate --region $DEFAULT_AWS_REGION --profile-name-process "python ${script_dir}/formatter.py"
  else
    aws-sso-util configure populate --region $DEFAULT_AWS_REGION
  fi

  complete -W "$(cat $HOME/.aws/config | grep -Eo '\[.*\]' | tr -d '[]' | cut -d " " -f 2)" "awsso"
}

awsso(){
  if [ $1 ]
  then
    case "$1" in
      -h | --help)
      command cat <<HELP
Usage:
    awsso [OPTION] | awsso <sso-profile>
OPTIONS:
    --help, -h:    Show this help and exit
    --setup:       Setup AWS SSO config
    --logout:      Logout of All SSO Sessions
    --list:        List your SSO Roles
    --populate:    Populate AWS Config with all your SSO roles
Example:
    awsso sso-profile-1
HELP
        return
        ;;
      --setup)
        # Simple boolean flag–call function here
        awsso_setup
        return
        ;;
      --populate)
        # Simple boolean flag–call function here
        awsso_populate
        return
        ;;
      --list)
        # Simple boolean flag–call function here
        awsso_list
        return
        ;;
      --logout)
        # Simple boolean flag–call function here
        awsso_logout
        return
        ;;
      *)
        awsso_login $1
        return
        ;;
      esac
  else
    awsso_login
  fi

  return
}

# Completion and autoload AWS env
[ -f $HOME/.aws/config ] && complete -W "$(cat $HOME/.aws/config | grep -Eo '\[.*\]' | tr -d '[]' | cut -d " " -f 2)" "awsso"
[ -f $HOME/.aws/last_used_profile ] && export AWS_PROFILE=$(command cat $HOME/.aws/last_used_profile)
